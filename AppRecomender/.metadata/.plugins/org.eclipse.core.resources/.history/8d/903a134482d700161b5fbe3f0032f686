(import appRecomender.model.*)
(deftemplate User       	(declare (from-class User)))
(deftemplate App			(declare (from-class App)))
(deftemplate Like 			(slot nick) (slot app)(slot fav))


;; ------------------------------------------------------------
;;-----------------REGLAS PERFILES USUARIO---------------------
;;-------------------------------------------------------------

;; ------------------------------------------------------------
;;-----------------REGLAS LENGUAJE USUARIO---------------------
;;-------------------------------------------------------------

;;las reglas de idioma establecen el idioma de un usuario por su pais de residencia, en el caso de que no este definido el lenguaje se establecerá a ingles por defecto

(defrule languageSpain
    ?u <- (User {country == "Spain"})
    =>
    (modify ?u (language spanish))
    )

(defrule languageFrace
    ?u <- (User {country == "Frace"})
    =>
    (modify ?u (language fraçais))
    )

(defrule languageItaly
    ?u <- (User {country == "Italy"})
    =>
    (modify ?u (language italian))
    )

(defrule languageGermany
    ?u <- (User {country == "Germany"})
    =>
    (modify ?u (language german))
    )

(defrule languageJapan
    ?u <- (User {country == "Japan"})
    =>
    (modify ?u (language japanese))
    )

(defrule languageChina
    ?u <- (User {country == "China"})
    =>
    (modify ?u (language chinese))
    )

(defrule languageRussia
    ?u <- (User {country == "Russia"})
    =>
    (modify ?u (language russian))
    )

;; ------------------------------------------------------------
;;-------------------REGLAS EDAD USUARIO-----------------------
;;-------------------------------------------------------------

;;cálculo de la edad a partir de la fecha de nacimiento
(deffunction getAge (?date)
    return (- 2017 ?date)
    )

;;establece la edad del usuario
(defrule age
    ?u <- (User )
    =>
    (modify ?u (age (getAge ?u.birthYear)))
    )


;; ------------------------------------------------------------
;;-------------------REGLAS ECLVL USUARIO----------------------
;;-------------------------------------------------------------


;;Establece un nivel económico en función de la edad y pais de residencia
;;Dicho nivel es un valor de cuanto esta "dispuesto" a pagar

(defrule ecLvlSFILow
    ?u <- (User {country == "Spain" || country == "Italy" || country == "France"}
        {age < 12})
    =>
    (modify ?u (ecLvl 5.0))
    )

(defrule ecLvlSFIMedium
    ?u <- (User {country == "Spain" || country == "Italy" || country == "France"}
        {age > 12 && age < 25})
    =>
    (modify ?u (ecLvl 15.0))
    )

(defrule ecLvlSFIHigh
    ?u <- (User {country == "Spain" || country == "Italy" || country == "France"}
        {age > 25})
    =>
    (modify ?u (ecLvl 80.0))
    )

(defrule ecLvlJapanChinaLow
    ?u <- (User {country == "China" || country == "Japan"}
        {age < 12})
    =>
    (modify ?u (ecLvl 5.0))
    )

(defrule ecLvlJapanChinaMedium
    ?u <- (User {country == "China" || country == "Japan"}
        {age > 12 && age < 25})
    =>
    (modify ?u (ecLvl 15.0))
    )

(defrule ecLvlJapanChinaRussiaHigh
    ?u <- (User {country == "China" || country == "Japan" || country == "Russia"}
        {age > 25})
    =>
    (modify ?u (ecLvl 15.0))
    )

(defrule ecLvlRussiaLow
    ?u <- (User {country == "Russia"}
        {age < 25})
    =>
    (modify ?u (ecLvl 5.0))
    )

(defrule ecLvlGermanyMedium
    ?u <- (User {country == "Germany"}
        {age < 25})
    =>
    (modify ?u (ecLvl 15.0))
    )

(defrule ecLvlGermanyHigh
    ?u <- (User {country == "Germany"}
        {age > 25})
    =>
    (modify ?u (ecLvl 80.0))
    )

;; ------------------------------------------------------------
;;----------------REGLAS GUSTOS USUARIO PERFIL-----------------
;;-------------------------------------------------------------

;;Perfiles de usuario generados en funcion del pais y de la edad, establece tipos de aplicaciones por las que tienen preferencia

(defrule standart
    (User (name ?nick))
    =>
    (assert (Like (nick ?nick) (app "Action") (fav 1)))
    (assert (Like (nick ?nick) (app "Adventure") (fav 1)))
    (assert (Like (nick ?nick) (app "Puzzle") (fav 1)))
    (assert (Like (nick ?nick) (app "Sports") (fav 1)))
    (assert (Like (nick ?nick) (app "News") (fav 1)))
    (assert (Like (nick ?nick) (app "RRSS") (fav 1)))
    (assert (Like (nick ?nick) (app "Books") (fav 1)))
    )

(defrule ratKid
    (User {(country == "Spain" || country == "France" ) && (age > 0) && (age < 14)}
        (name ?nick))
    =>
    (assert (Like (nick ?nick) (app "Adventure") (fav 1)))
    (assert (Like (nick ?nick) (app "Sports") (fav 1)))
    (assert (Like (nick ?nick) (app "Action") (fav 1)))
    (assert (Like (nick ?nick) (app "RRSS") (fav 1)))
    )

(defrule otaku
    (User {(country == "Spain" || country == "Japan" || country == "China") && (age > 15 && age < 26)} (name ?nick))
    =>
    (assert (Like (nick ?nick) (app "Vocaloid") (fav 1)))
    (assert (Like (nick ?nick) (app "Manga") (fav 1)))
    (assert (Like (nick ?nick) (app "RRSS") (fav 1)))
    (assert (Like (nick ?nick) (app "Strategy") (fav 1)))
    (assert (Like (nick ?nick) (app "Books") (fav 1)))
    )

(defrule hipster
    (User
        {(country == "Germany" || country == "France" || country == "Russia") && (age > 22 && age < 35)}
        (name ?nick))
    =>
    (assert (Like (nick ?nick) (app "Puzzle") (fav 1)))
    (assert (Like (nick ?nick) (app "RRSS") (fav 1)))
    (assert (Like (nick ?nick) (app "Books") (fav 1)))
    (assert (Like (nick ?nick) (app "News") (fav 1)))
    (assert (Like (nick ?nick) (app "Navigation") (fav 1)))
    
    
    )  
	
;;------------------------------------------------------------------
;;-------------------Querys-----------------------------------------
;;------------------------------------------------------------------


(defquery favoritos "encuentra los favoritos de un usuario"
    (declare (variables ?nick))
    (Like (nick ?nick) (app ?app) (fav ?fav))
    (App (categoryList ?app) (name ?name))
    )

(defquery appFinder "encuentra aplicaciones por nombre"
    (declare (variables ?name))
    (App (name ?name) (categoryList ?categoryList) (prize ?prize))
    
    )

(defquery getFav "encuentra el gusto de una persona por un tipo de aplicacion"
    (declare (variables ?nick ?app))
    (Like (nick ?nick)(app ?app)(fav ?fav)))

(defquery findUser "Encuentra usuarios por nick"
    (declare (variables ?name))
    (User (name ?name)))
